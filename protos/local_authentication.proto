syntax = "proto3";

option optimize_for = LITE_RUNTIME;

package dauth_local;

import "authentication_data.proto";


// Authenticates a UE and/or OTT User present in the local network.
//
// Currently supports 3GPP-style mutual Authentication and Key Agreement (AKA)
service LocalAuthentication {
    // Request a new 3GPP AKA authorization vector for a particular UE.
    //
    // Closely based on 3GPP nausf-auth/ue-authentications to support
    // integration with an AUSF/SEAF or HSS.
    rpc GetAuthVector(AKAVectorReq) returns (AKAVectorResp);

    // Report the UE provided response to confirm its authenticity and receive a
    // key if valid.
    //
    // Closely based on 3GPP
    // nausf-auth/ue-authentications/{authCtxId}/5g-aka-confirmation to support
    // integration with an AUSF/SEAF or HSS.
    rpc ConfirmAuth(AKAConfirmReq) returns (AKAConfirmResp);
}

message AKAVectorReq {
    // The type of id provided.
    d_auth.UserIdKind user_id_type = 1;

    // The opaque id of the user requesting authentication.
    bytes user_id = 2;

    // Identifiers for high-occurence future fields.
    reserved 3 to 15;

    // The resynchronization info field is rare, so don't use one of the
    // precious single-byte field ids.
    d_auth.AKAResyncInfo resync_info = 16;
}

message AKAVectorResp {
    // Whether the request was successful or not
    enum ErrorKind {
        NO_ERROR = 0;
        NOT_FOUND = 1;
    }
    ErrorKind error = 1;

    d_auth.AuthVector5G auth_vector = 2;

    // The type of id provided.
    enum UserIdKind {
        UNKNOWN = 0;
        SUPI = 1;
    }
    UserIdKind user_id_type = 3;

    // The opaque id of the user requesting authentication.
    // Added to response message for reuse in other operations.
    bytes user_id = 4;

    // The unique identifier of the auth vector transaction/generation
    bytes uuid = 5;
}

// Reports the confirmation of authentication of a UE present in the local
// network.
// TODO(matt9j) What is the expected outcome if the UE is actually invalid?
message AKAConfirmReq {
    // The type of id provided.
    d_auth.UserIdKind user_id_type = 1;

    // The opaque id of the user requesting authentication.
    bytes user_id = 2;

    // The UE-provided response, which may or may not be a preimage of the
    // provided hash.
    bytes res_star = 3;

    // The unique identifier of the auth vector transaction/generation
    bytes uuid = 4;

    // Identifiers for high-occurence future fields.
    reserved 5 to 15;
}

// Response with key material for a successful auth confirmation, or errors.
message AKAConfirmResp {
    // Whether the confirmation request was successful or not
    enum ErrorKind {
        // No error, the request was successful and the key material is included.
        NO_ERROR = 0;

        // The request failed due to lost connectivity with the relevant remote
        // network(s) providing key material.
        REMOTE_CONNECTION_FAILED = 1;

        // The request failed due to the UE providing an invalid res.
        RES_INVALID = 2;
    }
    ErrorKind error = 1;

    // The K_seaf to be used for further communication with the UE, only
    // provided if the error_kind is NO_ERROR.
    bytes kseaf = 2;

    // Identifiers for high-occurence future fields.
    reserved 3 to 15;
}
