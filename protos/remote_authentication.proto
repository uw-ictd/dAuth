syntax = "proto3";

option optimize_for = LITE_RUNTIME;

package dauth_remote;

import "authentication_data.proto";

enum SignedMessageKind {
    INVALID = 0;
    ENROLL_BACKUP_PREPARE_REQ = 1;
    GET_BACKUP_AUTH_VECTOR_REQ = 2;
    GET_KEY_SHARE_REQ = 3;
    WITHDRAW_BACKUP_REQ = 4;
    WITHDRAW_SHARES_REQ = 5;
    FLOOD_VECTOR_REQ = 6;
    GET_HOME_AUTH_VECTOR_REQ = 7;
    GET_HOME_CONFIRM_KEY_REQ = 8;
    DELEGATED_AUTH_VECTOR5_G = 9;
    DELEGATED_CONFIRMATION_SHARE = 10;
}

message SignedMessage {
    message Container {
        SignedMessageKind kind = 1;
        bytes payload = 2;
    }
    bytes container = 1;
    bytes signature = 2;
    string signer_id = 3;
}

message DelegatedAuthVector5G {
    message Payload {
        string serving_network_id = 1;
        d_auth.AuthVector5G v = 2;
    }
    SignedMessage message = 1;
}

// Represents an m of n share of the key response to a valid authentication
// confirmation.
// This is signed by the home network it originated from
message DelegatedConfirmationShare {
    message Payload {
        // The hashed xres_star corresponding to this confirmation. It is used as a
        // statistical index for selecting the correct confirmation share.
        // Collisions are possible but unlikely.
        bytes xres_star_hash = 1;

        // A threshold share of the k_seaf needed to communicate with the UE.
        bytes confirmation_share = 2;
    }
    SignedMessage message = 1; // Signed by home network, not backup network
}

service HomeNetwork {
    // Provides an auth vector requested from a different serving network if the
    // network is of sufficient reputation.
    //
    // Called by a serving network
    rpc GetAuthVector(GetHomeAuthVectorReq) returns (GetHomeAuthVectorResp);

    // Report an auth vector used
    //
    // Called by a serving network
    rpc GetConfirmKey(GetHomeConfirmKeyReq) returns (GetHomeConfirmKeyResp);

    // Report to the home network from a backup network that a serving network
    // requested to authenticate the particular user user.
    //
    // Called by a backup network
    //
    // Once received the home network needs to replace key shares in all
    // relevant backup networks.
    rpc ReportAuthConsumed(ReportHomeAuthConsumedReq) returns (ReportHomeAuthConsumedResp);

    // Report to the home network from a backup network that a serving network
    // requested key material for a particular user user.
    //
    // Called by a backup network
    //
    // Once received the home network needs to replace key shares in all other
    // relevant backup networks.
    rpc ReportKeyShareConsumed(ReportHomeKeyShareConsumedReq) returns (ReportHomeKeyShareConsumedResp);
}

message GetHomeAuthVectorReq {
    message Payload {
        string serving_network_id = 1;
        // The type of id provided.
        d_auth.UserIdKind user_id_type = 2;

        // The opaque id of the user requesting authentication.
        //
        // TODO(matt9j) Probably don't want to actually sign over the user id so
        // the message can be revealed later without revealing the id to build
        // reputation.
        bytes user_id = 3;
    }
    SignedMessage message = 1;
}

message GetHomeAuthVectorResp {
    // Provide a signed auth vector to allow the serving network to later prove
    // a valid authentication to build positive reputation. Otherwise signing
    // would not be strictly necessary in this case since the auth vector is
    // provided directly from the home network.
    DelegatedAuthVector5G vector = 1;
}


message GetHomeConfirmKeyReq {
    message Payload {
        // The network id requesting the key share. Once a key share is claimed
        // by a network is should never be sent to a different network.
        string serving_network_id = 1;

        // The received res_star that is a valid preimage of hash_xres_star.
        bytes res_star = 2;

        // The hash_xres_star corresponding to the key share this network is
        // claiming.
        bytes hash_xres_star = 3;
    }

    SignedMessage message = 1;
}

message GetHomeConfirmKeyResp {
    // The authentication key for the user's connection.
    bytes kseaf = 1;
}

message ReportHomeAuthConsumedReq {
    // The backup network that owned the auth vector.
    string backup_network_id = 1;

    // The signed auth request from the serving network that was given an auth
    // tuple.
    SignedMessage backup_auth_vector_req = 2;
}

message ReportHomeAuthConsumedResp {
    // New key material to replace what was used up in the previous
    // authentication
    DelegatedAuthVector5G vector = 1;
}

message ReportHomeKeyShareConsumedReq {
    // The backup network that owned the key share.
    string backup_network_id = 1;

    // The signed key request from the serving network sent sent to the backup
    // network.
    SignedMessage get_key_share_req = 2;
}

message ReportHomeKeyShareConsumedResp {
    // New key material to replace what was used up in the previous
    // authentication
    DelegatedConfirmationShare share = 1;
}

service BackupNetwork {
    // Get this network's permission to use them as a backup.
    //
    // Called by a home network.
    rpc EnrollBackupPrepare(EnrollBackupPrepareReq) returns (EnrollBackupPrepareResp);

    // Once a backup network agrees and returns the co-signed response to
    // EnrollBackupPrepare, the home network can safely provide it the
    // authentication vectors and commit shares delegated to it.
    //
    // Called by a home network.
    rpc EnrollBackupCommit(EnrollBackupCommitReq) returns (EnrollBackupCommitResp);

    // Request an auth vector from a backup network when the home network is not
    // accessable.
    //
    // Called from a serving network with an authenticating UE.
    rpc GetAuthVector(GetBackupAuthVectorReq) returns (GetBackupAuthVectorResp);

    // Request a key share provided the valid res_star for a given
    // hash(xres_star)
    //
    // Called from a serving network after authenticating the UE to begin
    // communication.
    rpc GetKeyShare(GetKeyShareReq) returns (GetKeyShareResp);

    // Request to replace/refresh key shares that have been used up, either by
    // their corresponding auth being consumed or other backup networks using
    // other shares of the key.
    //
    // Called proactively from the home network.
    rpc ReplaceKeyShare(ReplaceShareReq) returns (ReplaceShareResp);

    // Courtesy notification that this network should no longer backup a given
    // UE.
    //
    // Called from a home network.
    rpc WithdrawBackup(WithdrawBackupReq) returns (WithdrawBackupResp);

    // Request to remove and no longer service particular key shares.
    rpc WithdrawShares(WithdrawSharesReq) returns (WithdrawSharesResp);

    // Authenticate with the provided vector at the next opportunity.
    //
    // Called by the home network, and should cause all backup networks to
    // prefer to use this vector over their own vector subslice. Once a
    // confirmation is received for this vector the flood request can be
    // considered cleared.
    rpc FloodVector(FloodVectorReq) returns (FloodVectorResp);
}

message EnrollBackupPrepareReq {
    message Payload {
        // The home network requesting this network's participation in backup.
        string home_network_id = 1;
        // The backup network being requested to participate.
        string backup_network_id =2;

        // The user for which this network is requested to backup.
        //
        // TODO(matt9j) Probably don't want to actually sign over the user id so
        // the message can be revealed later without revealing the id?
        d_auth.UserIdKind user_id_kind = 3;
        bytes user_id = 4;

        // TODO(matt9j) Validity window min and max.

        // TODO(matt9j) Think through if we want to require the set of other
        // backup networks to be known and agreed upon or not. I don't think
        // it's strictly necessary to do so, but does have implications for what
        // an attack on the reputation system might look like.
    }
    SignedMessage message = 1;
}

message EnrollBackupPrepareResp {
    // The message payload is the entire EnrollBackupPrepareReq message
    SignedMessage message = 1;
}


message EnrollBackupCommitReq {
    // The set of origin auth vectors provided to this network for initiating
    // auth.
    repeated DelegatedAuthVector5G vectors = 1;

    // The set of confirmation shares provided to this network for confirming
    // auth in collaboration with other backup networks.
    repeated DelegatedConfirmationShare shares = 2;

    // The user for which this network is requested to backup.
    d_auth.UserIdKind user_id_kind = 3;
    bytes user_id = 4;
}

message EnrollBackupCommitResp {
    // The response has no fields for now, but is reserved for future use.
    reserved 1 to 15;
}


message GetBackupAuthVectorReq {
    message Payload {
        string serving_network_id = 1;
        // The type of id provided.
        d_auth.UserIdKind user_id_type = 2;

        // The opaque id of the user requesting authentication.
        //
        // TODO(matt9j) Probably don't want to actually sign over the user id so
        // the message can be revealed later without revealing the id?
        bytes user_id = 3;
    }
    SignedMessage message = 1;
}

message GetBackupAuthVectorResp {
    DelegatedAuthVector5G vector = 1;
}


message GetKeyShareReq {
    message Payload {
        // The network id requesting the key share. Once a key share is claimed
        // by a network is should never be sent to a different network.
        string serving_network_id = 1;

        // The received res_star that is a valid preimage of hash_xres_star.
        bytes res_star = 2;

        // The hash_xres_star corresponding to the key share this network is
        // claiming.
        bytes hash_xres_star = 3;
    }

    SignedMessage message = 1;
}

message GetKeyShareResp {
    // A threshold share of the k_seaf provided after confirmed authentication.
    DelegatedConfirmationShare share = 1;
}

message ReplaceShareReq {
    // The new confirmation share.
    DelegatedConfirmationShare new_share = 1;

    // The hashed xres_star corresponding to the replaced key share that is no
    // longer valid.
    bytes replaced_share_xres_star_hash = 2;
}

message ReplaceShareResp {
    // The response has no fields for now, but is reserved for future use.
    reserved 1 to 15;
}


message WithdrawBackupReq {
    message Payload {
        // The home network revoking this network's participation in backup.
        string home_network_id = 1;
        // The backup network being revoked.
        string backup_network_id =2;

        // The user for which this network was requested to backup.
        //
        // TODO(matt9j) Probably don't want to actually sign over the user id so
        // the message can be revealed later without revealing the id?
        d_auth.UserIdKind user_id_kind = 3;
        bytes user_id = 4;

        // TODO(matt9j) Time effective.
    }

    SignedMessage message = 1;
}

message WithdrawBackupResp {
    // The response has no fields for now, but is reserved for future use.
    reserved 1 to 15;
}

message WithdrawSharesReq {
    message Payload {
        // The ID of the home network requesting this withdraw.
        string home_network_id = 1;

        // The hash ids of the shares to withdraw.
        repeated bytes xres_star_hash = 2;
    }

    SignedMessage message = 1;
}

message WithdrawSharesResp {
    // The response has no fields for now, but is reserved for future use.
    reserved 1 to 15;
}


message FloodVectorReq {
    message Payload {
        // The home network requesting this vector be flood.
        string home_network_id = 1;

        // The vector to be flooded and used next.
        DelegatedAuthVector5G vector = 2;

        d_auth.UserIdKind user_id_kind = 3;
        bytes user_id = 4;
    }

    SignedMessage message = 1;
}

message FloodVectorResp {
    // The response has no fields for now, but is reserved for future use.
    reserved 1 to 15;
}
